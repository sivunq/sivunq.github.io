{"version":3,"file":"component---src-pages-contact-tsx-c59f3d13330b1b5d681c.js","mappings":"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","sources":["webpack://navdeep-personal-website/./src/components/Contact/Contact.tsx","webpack://navdeep-personal-website/./src/pages/contact.tsx"],"sourcesContent":["import Image, { FixedObject } from \"gatsby-image\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { SiteSiteMetadataAuthor } from \"graphql-types\";\nimport { useAvatar } from \"../../hooks\";\nimport { device } from \"../../styles/constants\";\nimport { rhythm } from \"../../utils/typography\";\n\ninterface ContactProps {\n  author: SiteSiteMetadataAuthor;\n}\n\nconst Contact: React.FunctionComponent<ContactProps> = ({\n  author,\n}): React.ReactElement => {\n  const avatar = useAvatar({ width: 200, height: 200 });\n\n  const [serverState, setServerState] = useState({\n    submitting: false,\n    status: null,\n  });\n  const handleServerResponse = (ok, msg, form) => {\n    setServerState({\n      submitting: false,\n      status: { ok, msg },\n    });\n    if (ok) {\n      form.reset();\n    }\n  };\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    const form = e.target;\n    setServerState({ submitting: true });\n    axios({\n      method: \"post\",\n      url: \"https://getform.io/f/4113f349-e99f-495a-b529-18c2cb40e11c\",\n      data: new FormData(form),\n    })\n      .then((r) => {\n        handleServerResponse(true, \"Thanks!\", form);\n      })\n      .catch((r) => {\n        handleServerResponse(false, r.response.data.error, form);\n      });\n  };\n\n  return (\n    <Root>\n      <Avatar fixed={avatar.childImageSharp.fixed as FixedObject} />\n\n      <div>\n        <div className=\"col-md-8 mt-5\">\n          <h3>Getform.io Gatsby Form Example</h3>\n          <form onSubmit={handleOnSubmit}>\n            <div className=\"form-group\">\n              <label for=\"exampleInputEmail1\" required=\"required\">\n                Email address\n              </label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                className=\"form-control\"\n                id=\"exampleInputEmail1\"\n                aria-describedby=\"emailHelp\"\n                placeholder=\"Enter email\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label for=\"exampleInputName\">Name</label>\n              <input\n                type=\"text\"\n                name=\"name\"\n                className=\"form-control\"\n                id=\"exampleInputName\"\n                placeholder=\"Enter your name\"\n                required=\"required\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label for=\"exampleFormControlSelect1\">Favourite Platform</label>\n              <select\n                className=\"form-control\"\n                id=\"exampleFormControlSelect1\"\n                name=\"platform\"\n                required=\"required\"\n              >\n                <option>Github</option>\n                <option>Gitlab</option>\n                <option>Bitbucket</option>\n              </select>\n            </div>\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={serverState.submitting}\n            >\n              Submit\n            </button>\n            {serverState.status && (\n              <p className={!serverState.status.ok ? \"errorMsg\" : \"\"}>\n                {serverState.status.msg}\n              </p>\n            )}\n          </form>\n        </div>\n      </div>\n    </Root>\n  );\n};\n\nconst Root = styled.div`\n  display: grid;\n  grid-gap: ${rhythm(2)};\n  margin-top: ${rhythm(0.5)};\n\n  @media ${device.tablet} {\n    grid-template-columns: minmax(20%, 200px) 70%;\n  }\n`;\n\nconst Avatar = styled(Image)`\n  align-self: center;\n\n  border-radius: 50%;\n  width: 150px;\n  height: 150px;\n  justify-self: center;\n  align-self: flex-start;\n\n  @media ${device.tablet} {\n    width: auto;\n    height: auto;\n    justify-self: start;\n  }\n`;\n\nconst Description = styled.section`\n  h4 {\n    margin-top: ${rhythm(0.5)};\n  }\n`;\n\nexport default Contact;\n","import React from \"react\";\nimport { animated } from \"react-spring\";\nimport { GatsbyLocation } from \"local-types\";\n\nimport Contact from \"../components/Contact\";\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/Seo\";\nimport { useSiteMetadata, usePageTransitions } from \"../hooks\";\n\ninterface ContactPageProps {\n  location: GatsbyLocation;\n}\n\nconst ContactPage: React.FunctionComponent<ContactPageProps> = ({\n  location,\n}): React.ReactElement => {\n  const { title: siteTitle, author } = useSiteMetadata();\n\n  const transitions = usePageTransitions({ location });\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Contact\" />\n      {transitions.map(({ props, key }) => (\n        <animated.div key={key} style={props}>\n          <Contact author={author} />\n        </animated.div>\n      ))}\n    </Layout>\n  );\n};\n\nexport default ContactPage;\n"],"names":["Root","styled","div","withConfig","displayName","componentId","rhythm","device","tablet","Avatar","Image","section","_ref","author","avatar","useAvatar","width","height","serverState","setServerState","useState","submitting","status","handleServerResponse","ok","msg","form","reset","React","fixed","childImageSharp","className","onSubmit","e","preventDefault","target","axios","method","url","data","FormData","then","r","catch","response","error","for","required","type","name","id","placeholder","disabled","location","title","siteTitle","useSiteMetadata","transitions","usePageTransitions","Layout","SEO","map","_ref2","props","key","animated","style","Contact"],"sourceRoot":""}