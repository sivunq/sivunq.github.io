{"version":3,"sources":["webpack:///./src/components/Contact/Contact.tsx","webpack:///./src/pages/contact.tsx"],"names":["Root","styled","div","rhythm","device","tablet","Avatar","Image","Contact","section","author","avatar","useAvatar","width","height","useState","submitting","status","serverState","setServerState","handleServerResponse","ok","msg","form","reset","fixed","childImageSharp","className","onSubmit","e","preventDefault","target","axios","method","url","data","FormData","then","r","catch","response","error","for","required","type","name","id","aria-describedby","placeholder","disabled","ContactPage","location","useSiteMetadata","siteTitle","title","transitions","usePageTransitions","Layout","map","props","key","style"],"mappings":"+MAwFMA,EAAOC,IAAOC,IAAV,mEAAGD,CAAH,sGAEIE,YAAO,GACLA,YAAO,IAEZC,IAAOC,QAKZC,EAASL,YAAOM,KAAV,qEAAGN,CAAH,kKASDG,IAAOC,QAaHG,GANKP,IAAOQ,QAAV,0EAAGR,CAAH,wBAECE,YAAO,KAtG8B,SAAC,GAE9B,EADxBO,OACwB,IAClBC,EAASC,YAAU,CAAEC,MAAO,IAAKC,OAAQ,MADvB,EAGcC,mBAAS,CAC3CC,YAAY,EACZC,OAAQ,OAFLC,EAHiB,KAGJC,EAHI,KAOhBC,EAAuB,SAACC,EAAIC,EAAKC,GACrCJ,EAAe,CACbH,YAAY,EACZC,OAAQ,CAAEI,KAAIC,SAEZD,GACFE,EAAKC,SAoBX,OACE,kBAACxB,EAAD,KACE,kBAACM,EAAD,CAAQmB,MAAOd,EAAOe,gBAAgBD,QAEtC,6BACG,yBAAKE,UAAU,iBACZ,8DACA,0BAAMC,SAxBS,SAAAC,GACrBA,EAAEC,iBACF,IAAMP,EAAOM,EAAEE,OACfZ,EAAe,CAAEH,YAAY,IAC7BgB,MAAM,CACJC,OAAQ,OACRC,IAAK,4DACLC,KAAM,IAAIC,SAASb,KAElBc,MAAK,SAAAC,GACJlB,GAAqB,EAAM,UAAWG,MAEvCgB,OAAM,SAAAD,GACLlB,GAAqB,EAAOkB,EAAEE,SAASL,KAAKM,MAAOlB,QAYjD,yBAAKI,UAAU,cACX,2BAAOe,IAAI,qBAAqBC,SAAS,YAAzC,iBACA,2BAAOC,KAAK,QAAQC,KAAK,QAAQlB,UAAU,eAAemB,GAAG,qBAAqBC,mBAAiB,YAAYC,YAAY,iBAE/H,yBAAKrB,UAAU,cACX,2BAAOe,IAAI,oBAAX,QACA,2BAAOE,KAAK,OAAOC,KAAK,OAAOlB,UAAU,eAAemB,GAAG,mBAAmBE,YAAY,kBAAkBL,SAAS,cAEzH,yBAAKhB,UAAU,cACX,2BAAOe,IAAI,6BAAX,sBACA,4BAAQf,UAAU,eAAemB,GAAG,4BAA4BD,KAAK,WAAWF,SAAS,YACzF,0CACA,0CACA,+CAGJ,4BAAQC,KAAK,SAASjB,UAAU,kBAAmBsB,SAAU/B,EAAYF,YAAzE,UAGCE,EAAYD,QACT,uBAAGU,UAAYT,EAAYD,OAAOI,GAAkB,GAAb,YACtCH,EAAYD,OAAOK,W,wBC9CrB4B,UAnBgD,SAAC,GAEtC,IADxBC,EACwB,EADxBA,SACwB,EACaC,cAAtBC,EADS,EAChBC,MAAkB5C,EADF,EACEA,OAEpB6C,EAAcC,YAAmB,CAAEL,aAEzC,OACE,kBAACM,EAAA,EAAD,CAAQN,SAAUA,EAAUG,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,YACVC,EAAYG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAV,OACf,kBAAC,IAAS1D,IAAV,CAAc0D,IAAKA,EAAKC,MAAOF,GAC7B,kBAAC,EAAD,CAASjD,OAAQA","file":"component---src-pages-contact-tsx-c4dffbfdd1925099f1ee.js","sourcesContent":["import React, { useState }  from \"react\"\nimport styled from \"styled-components\";\nimport Image, { FixedObject } from \"gatsby-image\";\n\nimport { SiteSiteMetadataAuthor } from \"graphql-types\";\nimport { rhythm } from \"../../utils/typography\";\nimport { yearsSince } from \"../../utils/timeSince\";\nimport { device } from \"../../styles/constants\";\nimport { useAvatar } from \"../../hooks\";\n\ninterface ContactProps {\n  author: SiteSiteMetadataAuthor;\n}\n\nconst Contact: React.FunctionComponent<ContactProps> = ({\n  author,\n}): React.ReactElement => {\n  const avatar = useAvatar({ width: 200, height: 200 });\n  \n  const [serverState, setServerState] = useState({\n      submitting: false,\n      status: null\n    });\n    const handleServerResponse = (ok, msg, form) => {\n      setServerState({\n        submitting: false,\n        status: { ok, msg }\n      });\n      if (ok) {\n        form.reset();\n      }\n    };\n    const handleOnSubmit = e => {\n      e.preventDefault();\n      const form = e.target;\n      setServerState({ submitting: true });\n      axios({\n        method: \"post\",\n        url: \"https://getform.io/f/4113f349-e99f-495a-b529-18c2cb40e11c\",\n        data: new FormData(form)\n      })\n        .then(r => {\n          handleServerResponse(true, \"Thanks!\", form);\n        })\n        .catch(r => {\n          handleServerResponse(false, r.response.data.error, form);\n        });\n    };\n\n  return (\n    <Root>\n      <Avatar fixed={avatar.childImageSharp.fixed as FixedObject} />\n\n      <div>\n         <div className=\"col-md-8 mt-5\">\n            <h3>Getform.io Gatsby Form Example</h3>\n            <form onSubmit={handleOnSubmit}>\n            <div className=\"form-group\">\n                <label for=\"exampleInputEmail1\" required=\"required\">Email address</label>\n                <input type=\"email\" name=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\"/>\n            </div> \n            <div className=\"form-group\">\n                <label for=\"exampleInputName\">Name</label>\n                <input type=\"text\" name=\"name\" className=\"form-control\" id=\"exampleInputName\" placeholder=\"Enter your name\" required=\"required\"/>\n            </div>\n            <div className=\"form-group\">\n                <label for=\"exampleFormControlSelect1\">Favourite Platform</label>\n                <select className=\"form-control\" id=\"exampleFormControlSelect1\" name=\"platform\" required=\"required\">\n                <option>Github</option>\n                <option>Gitlab</option>\n                <option>Bitbucket</option>\n                </select>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\"  disabled={serverState.submitting}>\n                Submit\n            </button>\n            {serverState.status && (\n                <p className={!serverState.status.ok ? \"errorMsg\" : \"\"}>\n                {serverState.status.msg}\n                </p>\n            )}\n            </form>\n        </div>\n      </div> \n    </Root>\n  );\n};\n\nconst Root = styled.div`\n  display: grid;\n  grid-gap: ${rhythm(2)};\n  margin-top: ${rhythm(0.5)};\n\n  @media ${device.tablet} {\n    grid-template-columns: minmax(20%, 200px) 70%;\n  }\n`;\n\nconst Avatar = styled(Image)`\n  align-self: center;\n\n  border-radius: 50%;\n  width: 150px;\n  height: 150px;\n  justify-self: center;\n  align-self: flex-start;\n\n  @media ${device.tablet} {\n    width: auto;\n    height: auto;\n    justify-self: start;\n  }\n`;\n\nconst Description = styled.section`\n  h4 {\n    margin-top: ${rhythm(0.5)};\n  }\n`;\n\nexport default Contact;\n","import React from \"react\";\nimport { animated } from \"react-spring\";\nimport { GatsbyLocation } from \"local-types\";\n\nimport Contact from \"../components/Contact\";\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/Seo\";\nimport { useSiteMetadata, usePageTransitions } from \"../hooks\";\n\ninterface ContactPageProps {\n  location: GatsbyLocation;\n}\n\nconst ContactPage: React.FunctionComponent<ContactPageProps> = ({\n  location,\n}): React.ReactElement => {\n  const { title: siteTitle, author } = useSiteMetadata();\n\n  const transitions = usePageTransitions({ location });\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Contact\" />\n      {transitions.map(({ props, key }) => (\n        <animated.div key={key} style={props}>\n          <Contact author={author} />\n        </animated.div>\n      ))}\n    </Layout>\n  );\n};\n\nexport default ContactPage;\n"],"sourceRoot":""}