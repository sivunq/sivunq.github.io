{"version":3,"sources":["webpack:///./src/components/Comment/index.jsx","webpack:///./src/components/Post/Post.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["Comments","componentDidMount","d","s","pageId","this","props","pageCanonicalUrl","window","disqus_config","page","url","identifier","document","createElement","src","setAttribute","Date","head","body","appendChild","render","id","React","Component","Root","styled","section","rhythm","scale","Title","h1","Info","p","Content","article","Post","post","frontmatter","title","date","timeToRead","dangerouslySetInnerHTML","__html","html","className","BlogPostTemplate","data","location","markdownRemark","useSiteMetadata","siteTitle","siteUrl","transitions","usePageTransitions","Layout","headerProps","showBackNav","description","image","cover","childImageSharp","fixed","undefined","imageAlt","type","slug","meta","property","content","category","tags","map","t","key","div","style","Comment"],"mappings":"4KAmCeA,E,0GA/BbC,kBAAA,WAAqB,IAUTC,EACAC,EAXQ,OACXC,EAAWC,KAAKC,MAAhBF,OAEJG,EAAmB,iCAAiCH,EAErDI,OAAOC,cAAgB,WACrB,EAAKC,KAAKC,IAAMJ,EAChB,EAAKG,KAAKE,WAAaR,GAGjBF,EAAIW,UACJV,EAAID,EAAEY,cAAc,WACxBC,IAAM,qCACRZ,EAAEa,aAAa,kBAAmB,IAAIC,OACrCf,EAAEgB,MAAQhB,EAAEiB,MAAMC,YAAYjB,I,EAIrCkB,OAAA,WACE,OACE,6BACE,yBAAKC,GAAG,oB,GAtBOC,IAAMC,W,gDCwBvBC,EAAOC,IAAOC,QAAV,gEAAGD,CAAH,0MAEKE,YAAO,IAClBC,YAAM,IAMOD,YAAO,IAYlBE,EAAQJ,IAAOK,GAAV,iEAAGL,CAAH,kDAEKE,YAAO,IAIjBI,EAAON,IAAOO,EAAV,gEAAGP,CAAH,qEACKE,YAAO,IAGHA,YAAO,IAGpBM,EAAUR,IAAOS,QAAV,mEAAGT,CAAH,sNAIPG,aAAO,IAKQD,YAAO,IAMZA,YAAO,KAMRQ,EArEkC,SAAC,GAAD,IAC/CC,EAD+C,EAC/CA,KAD+C,OAG/C,kBAACZ,EAAD,KACE,kBAACK,EAAD,KAAQO,EAAKC,YAAYC,OACzB,kBAACP,EAAD,KACGK,EAAKC,YAAYE,KADpB,MAC6BH,EAAKI,WADlC,aAGA,kBAACP,EAAD,CAASQ,wBAAyB,CAAEC,OAAQN,EAAKO,QAEjD,yBAAKC,UAAU,gB,YCyCJC,UA7C0D,SAAC,GAGhD,IAFxBC,EAEwB,EAFxBA,KACAC,EACwB,EADxBA,SACwB,EACSD,EAAKE,eAA9BX,EADgB,EAChBA,YAAgBD,EADA,iCAEca,cAAvBC,EAFS,EAEhBZ,MAAkBa,EAFF,EAEEA,QAEpBC,EAAcC,YAAmB,CAAEN,aAEzC,OACE,kBAACO,EAAA,EAAD,CACEP,SAAUA,EACVT,MAAOY,EACPK,YAAa,CAAEC,aAAa,IAE5B,kBAAC,IAAD,CACElB,MAAOD,EAAYC,MACnBmB,YAAgBrB,EAAKI,WAAV,eAAmCH,EAAYoB,YAC1DC,MACErB,EAAYsB,MACRtB,EAAYsB,MAAMC,gBAAgBC,MAAM/C,SACxCgD,EAENC,SAAQ,mBAAqB1B,EAAYC,MACzC0B,KAAK,UACLtD,IAAQyC,EAAL,SAAqBd,EAAY4B,KACpCC,KAAI,CACF,CAAEC,SAAU,yBAA0BC,QAAS/B,EAAYE,MAC3D,CAAE4B,SAAU,kBAAmBC,QAAS/B,EAAYgC,WAFlD,oBAGEhC,EAAYiC,MAAQ,IAAIC,KAAI,SAAAC,GAAC,MAAK,CACpCL,SAAU,cACVC,QAASI,UAIdpB,EAAYmB,KAAI,gBAAGlE,EAAH,EAAGA,MAAOoE,EAAV,EAAUA,IAAV,OACf,kBAAC,IAASC,IAAV,CAAcD,IAAKA,EAAKE,MAAOtE,GAC7B,kBAAC,EAAD,CAAM+B,KAAI,eAAIC,eAAgBD,SAGrC,kBAACwC,EAAD,CAASzE,OAAQkC,EAAY4B","file":"component---src-templates-blog-post-tsx-c27ef5744f7d071a4325.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Comments extends React.Component {\n  componentDidMount() {\n    const {pageId } = this.props;\n\t\n\tconst pageCanonicalUrl = \"https://sivunq.github.io/blog/\"+pageId; \n\n      window.disqus_config = () => {\n        this.page.url = pageCanonicalUrl;\n        this.page.identifier = pageId;\n      };\n      (function () {\n        const d = document;\n        const s = d.createElement('script');\n        s.src = 'https://sivunq.disqus.com/embed.js';\n        s.setAttribute('data-timestamp', +new Date());\n        (d.head || d.body).appendChild(s);\n      }());\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"disqus_thread\" />\n      </div>\n    );\n  }\n}\n\nComments.propTypes = {\n  pageId: PropTypes.string.isRequired\n};\n\nexport default Comments;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { MarkdownRemark } from \"graphql-types\";\n\nimport Author from \"../Layout/Author\";\nimport Comment from '../Comment';\n\nimport { rhythm, scale } from \"../../utils/typography\";\n\ninterface PostProps {\n  post: MarkdownRemark;\n}\n\nconst Post: React.FunctionComponent<PostProps> = ({\n  post,\n}): React.ReactElement => (\n  <Root>\n    <Title>{post.frontmatter.title}</Title>\n    <Info>\n      {post.frontmatter.date} · {post.timeToRead} min read\n    </Info>\n    <Content dangerouslySetInnerHTML={{ __html: post.html }} />\n\t\n    <div className=\"separator\" />\n  </Root>\n);\n\nconst Root = styled.section`\n  margin: auto;\n  max-width: ${rhythm(28)};\n  ${scale(0.1)}\n\n  .separator {\n    margin: 20px 0px;\n    border: none;\n    text-align: center;\n    font-size: ${rhythm(1)};\n    font-weight: 300;\n\n    &:before {\n      line-height: 1.4;\n      text-indent: 0.6em;\n      letter-spacing: 0.6em;\n      content: \"···\";\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  color: #be2727;\n  margin-top: ${rhythm(1)};\n  margin-bottom: 0;\n`;\n\nconst Info = styled.p`\n  font-size: ${rhythm(0.6)};\n  font-style: italic;\n  display: block;\n  margin-bottom: ${rhythm(1)};\n`;\n\nconst Content = styled.article`\n  .md-figure-caption,\n  .gatsby-resp-image-figcaption {\n    text-align: center;\n    ${scale(-0.2)};\n    font-style: italic;\n  }\n\n  .gatsby-resp-image-background-image {\n    margin-bottom: ${rhythm(0.1)};\n  }\n\n  .video_container {\n    iframe {\n      width: 100%;\n      height: ${rhythm(20)};\n      margin-bottom: 0;\n    }\n  }\n`;\n\nexport default Post;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { animated } from \"react-spring\";\nimport { GatsbyLocation } from \"local-types\";\nimport { MarkdownRemark } from \"graphql-types\";\n\nimport Comment from '../components/Comment';\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/Seo\";\nimport Post from \"../components/Post\";\nimport { useSiteMetadata, usePageTransitions } from \"../hooks\";\n\ninterface BlogPostTemplateProps {\n  location: GatsbyLocation;\n  data: {\n    markdownRemark: MarkdownRemark;\n  };\n}\n\nconst BlogPostTemplate: React.FunctionComponent<BlogPostTemplateProps> = ({\n  data,\n  location,\n}): React.ReactElement => {\n  const { frontmatter, ...post } = data.markdownRemark;\n  const { title: siteTitle, siteUrl } = useSiteMetadata();\n\n  const transitions = usePageTransitions({ location });\n  \n  return (\n    <Layout\n      location={location}\n      title={siteTitle}\n      headerProps={{ showBackNav: true }}\n    >\n      <SEO\n        title={frontmatter.title}\n        description={`${post.timeToRead} min read · ${frontmatter.description}`}\n        image={\n          frontmatter.cover\n            ? frontmatter.cover.childImageSharp.fixed.src\n            : undefined\n        }\n        imageAlt={`Cover photo for ${frontmatter.title}`}\n        type=\"article\"\n        url={`${siteUrl}/blog/${frontmatter.slug}`}\n        meta={[\n          { property: \"article:published_time\", content: frontmatter.date },\n          { property: \"article:section\", content: frontmatter.category },\n          ...(frontmatter.tags || []).map(t => ({\n            property: \"article:tag\",\n            content: t,\n          })),\n        ]}\n      />\n      {transitions.map(({ props, key }) => (\n        <animated.div key={key} style={props}>\n          <Post post={{ frontmatter, ...post }} />\n        </animated.div>\n      ))}\n\t  <Comment pageId={frontmatter.slug} />\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        cover {\n          childImageSharp {\n            fixed {\n              src\n            }\n          }\n        }\n        slug\n        description\n        category\n        tags\n      }\n      timeToRead\n    }\n  }\n`;\n"],"sourceRoot":""}